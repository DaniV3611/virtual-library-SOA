/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as CartImport } from './routes/cart'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as BooksIndexImport } from './routes/books/index'
import { Route as ProfileMeImport } from './routes/profile/me'
import { Route as OrdersIdImport } from './routes/orders/$id'
import { Route as ProfilePaymentsIndexImport } from './routes/profile/payments/index'
import { Route as ProfileOrdersIndexImport } from './routes/profile/orders/index'
import { Route as ProfilePaymentsIdImport } from './routes/profile/payments/$id'
import { Route as ProfileOrdersIdImport } from './routes/profile/orders/$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CartRoute = CartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileMeRoute = ProfileMeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => ProfileRoute,
} as any)

const OrdersIdRoute = OrdersIdImport.update({
  id: '/orders/$id',
  path: '/orders/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProfilePaymentsIndexRoute = ProfilePaymentsIndexImport.update({
  id: '/payments/',
  path: '/payments/',
  getParentRoute: () => ProfileRoute,
} as any)

const ProfileOrdersIndexRoute = ProfileOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => ProfileRoute,
} as any)

const ProfilePaymentsIdRoute = ProfilePaymentsIdImport.update({
  id: '/payments/$id',
  path: '/payments/$id',
  getParentRoute: () => ProfileRoute,
} as any)

const ProfileOrdersIdRoute = ProfileOrdersIdImport.update({
  id: '/orders/$id',
  path: '/orders/$id',
  getParentRoute: () => ProfileRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/orders/$id': {
      id: '/orders/$id'
      path: '/orders/$id'
      fullPath: '/orders/$id'
      preLoaderRoute: typeof OrdersIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/me': {
      id: '/profile/me'
      path: '/me'
      fullPath: '/profile/me'
      preLoaderRoute: typeof ProfileMeImport
      parentRoute: typeof ProfileImport
    }
    '/books/': {
      id: '/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof ProfileImport
    }
    '/profile/orders/$id': {
      id: '/profile/orders/$id'
      path: '/orders/$id'
      fullPath: '/profile/orders/$id'
      preLoaderRoute: typeof ProfileOrdersIdImport
      parentRoute: typeof ProfileImport
    }
    '/profile/payments/$id': {
      id: '/profile/payments/$id'
      path: '/payments/$id'
      fullPath: '/profile/payments/$id'
      preLoaderRoute: typeof ProfilePaymentsIdImport
      parentRoute: typeof ProfileImport
    }
    '/profile/orders/': {
      id: '/profile/orders/'
      path: '/orders'
      fullPath: '/profile/orders'
      preLoaderRoute: typeof ProfileOrdersIndexImport
      parentRoute: typeof ProfileImport
    }
    '/profile/payments/': {
      id: '/profile/payments/'
      path: '/payments'
      fullPath: '/profile/payments'
      preLoaderRoute: typeof ProfilePaymentsIndexImport
      parentRoute: typeof ProfileImport
    }
  }
}

// Create and export the route tree

interface ProfileRouteChildren {
  ProfileMeRoute: typeof ProfileMeRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  ProfileOrdersIdRoute: typeof ProfileOrdersIdRoute
  ProfilePaymentsIdRoute: typeof ProfilePaymentsIdRoute
  ProfileOrdersIndexRoute: typeof ProfileOrdersIndexRoute
  ProfilePaymentsIndexRoute: typeof ProfilePaymentsIndexRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileMeRoute: ProfileMeRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  ProfileOrdersIdRoute: ProfileOrdersIdRoute,
  ProfilePaymentsIdRoute: ProfilePaymentsIdRoute,
  ProfileOrdersIndexRoute: ProfileOrdersIndexRoute,
  ProfilePaymentsIndexRoute: ProfilePaymentsIndexRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRouteWithChildren
  '/signup': typeof SignupRoute
  '/orders/$id': typeof OrdersIdRoute
  '/profile/me': typeof ProfileMeRoute
  '/books': typeof BooksIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/profile/orders/$id': typeof ProfileOrdersIdRoute
  '/profile/payments/$id': typeof ProfilePaymentsIdRoute
  '/profile/orders': typeof ProfileOrdersIndexRoute
  '/profile/payments': typeof ProfilePaymentsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/orders/$id': typeof OrdersIdRoute
  '/profile/me': typeof ProfileMeRoute
  '/books': typeof BooksIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/profile/orders/$id': typeof ProfileOrdersIdRoute
  '/profile/payments/$id': typeof ProfilePaymentsIdRoute
  '/profile/orders': typeof ProfileOrdersIndexRoute
  '/profile/payments': typeof ProfilePaymentsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRouteWithChildren
  '/signup': typeof SignupRoute
  '/orders/$id': typeof OrdersIdRoute
  '/profile/me': typeof ProfileMeRoute
  '/books/': typeof BooksIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/profile/orders/$id': typeof ProfileOrdersIdRoute
  '/profile/payments/$id': typeof ProfilePaymentsIdRoute
  '/profile/orders/': typeof ProfileOrdersIndexRoute
  '/profile/payments/': typeof ProfilePaymentsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/cart'
    | '/login'
    | '/profile'
    | '/signup'
    | '/orders/$id'
    | '/profile/me'
    | '/books'
    | '/orders'
    | '/profile/'
    | '/profile/orders/$id'
    | '/profile/payments/$id'
    | '/profile/orders'
    | '/profile/payments'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/cart'
    | '/login'
    | '/signup'
    | '/orders/$id'
    | '/profile/me'
    | '/books'
    | '/orders'
    | '/profile'
    | '/profile/orders/$id'
    | '/profile/payments/$id'
    | '/profile/orders'
    | '/profile/payments'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/cart'
    | '/login'
    | '/profile'
    | '/signup'
    | '/orders/$id'
    | '/profile/me'
    | '/books/'
    | '/orders/'
    | '/profile/'
    | '/profile/orders/$id'
    | '/profile/payments/$id'
    | '/profile/orders/'
    | '/profile/payments/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  CartRoute: typeof CartRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  SignupRoute: typeof SignupRoute
  OrdersIdRoute: typeof OrdersIdRoute
  BooksIndexRoute: typeof BooksIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  CartRoute: CartRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRouteWithChildren,
  SignupRoute: SignupRoute,
  OrdersIdRoute: OrdersIdRoute,
  BooksIndexRoute: BooksIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/cart",
        "/login",
        "/profile",
        "/signup",
        "/orders/$id",
        "/books/",
        "/orders/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/cart": {
      "filePath": "cart.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/me",
        "/profile/",
        "/profile/orders/$id",
        "/profile/payments/$id",
        "/profile/orders/",
        "/profile/payments/"
      ]
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/orders/$id": {
      "filePath": "orders/$id.tsx"
    },
    "/profile/me": {
      "filePath": "profile/me.tsx",
      "parent": "/profile"
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx",
      "parent": "/profile"
    },
    "/profile/orders/$id": {
      "filePath": "profile/orders/$id.tsx",
      "parent": "/profile"
    },
    "/profile/payments/$id": {
      "filePath": "profile/payments/$id.tsx",
      "parent": "/profile"
    },
    "/profile/orders/": {
      "filePath": "profile/orders/index.tsx",
      "parent": "/profile"
    },
    "/profile/payments/": {
      "filePath": "profile/payments/index.tsx",
      "parent": "/profile"
    }
  }
}
ROUTE_MANIFEST_END */
